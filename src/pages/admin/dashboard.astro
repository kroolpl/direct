---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { supabase, type Business } from '../../lib/supabase';

// Fetch statistics
const [pendingCount, approvedCount, rejectedCount] = await Promise.all([
  supabase.from('businesses').select('id', { count: 'exact' }).eq('status', 'pending'),
  supabase.from('businesses').select('id', { count: 'exact' }).eq('status', 'approved'),
  supabase.from('businesses').select('id', { count: 'exact' }).eq('status', 'rejected')
]);

// Fetch recent pending businesses
const { data: pendingBusinesses } = await supabase
  .from('businesses')
  .select('*, users(email)')
  .eq('status', 'pending')
  .order('created_at', { ascending: false })
  .limit(5);
---

<AdminLayout title="Dashboard">
  <!-- Statistics -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
    <div class="bg-white p-6 rounded-lg shadow-sm">
      <h3 class="text-lg font-medium text-gray-900">Pending</h3>
      <p class="text-3xl font-bold text-orange-600">{pendingCount.count}</p>
    </div>
    <div class="bg-white p-6 rounded-lg shadow-sm">
      <h3 class="text-lg font-medium text-gray-900">Approved</h3>
      <p class="text-3xl font-bold text-green-600">{approvedCount.count}</p>
    </div>
    <div class="bg-white p-6 rounded-lg shadow-sm">
      <h3 class="text-lg font-medium text-gray-900">Rejected</h3>
      <p class="text-3xl font-bold text-red-600">{rejectedCount.count}</p>
    </div>
  </div>

  <!-- Recent Pending Businesses -->
  <div class="bg-white rounded-lg shadow-sm">
    <div class="p-6 border-b">
      <h2 class="text-xl font-semibold">Recent Pending Businesses</h2>
    </div>
    <div class="divide-y">
      {pendingBusinesses?.map((business) => (
        <div class="p-6 hover:bg-gray-50">
          <div class="flex justify-between items-start">
            <div>
              <h3 class="font-medium text-lg">{business.name}</h3>
              <p class="text-sm text-gray-500">Submitted by: {business.users.email}</p>
              <p class="text-sm text-gray-500">Category: {business.category}</p>
              <p class="mt-2 text-gray-600">{business.description}</p>
            </div>
            <div class="flex gap-2">
              <button
                data-business-id={business.id}
                data-action="approve"
                class="approve-btn px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
              >
                Approve
              </button>
              <button
                data-business-id={business.id}
                data-action="reject"
                class="reject-btn px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
              >
                Reject
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>
    <div class="p-4 border-t">
      <a href="/admin/businesses?status=pending" class="text-blue-600 hover:text-blue-800">
        View all pending businesses â†’
      </a>
    </div>
  </div>
</AdminLayout>

<script>
  import { supabase } from '../../lib/supabase';

  document.addEventListener('click', async (e) => {
    const target = e.target as HTMLElement;
    if (!target.matches('.approve-btn, .reject-btn')) return;

    const businessId = target.dataset.businessId;
    const action = target.dataset.action;
    if (!businessId || !action) return;

    try {
      target.disabled = true;
      target.textContent = action === 'approve' ? 'Approving...' : 'Rejecting...';

      const { error } = await supabase
        .from('businesses')
        .update({ 
          status: action === 'approve' ? 'approved' : 'rejected',
          reviewed_at: new Date().toISOString()
        })
        .eq('id', businessId);

      if (error) throw error;

      const card = target.closest('.p-6');
      card?.remove();

      // Update counts
      const countElement = document.querySelector(`[data-status="${action === 'approve' ? 'approved' : 'rejected'}"] .count`);
      if (countElement) {
        countElement.textContent = (parseInt(countElement.textContent || '0') + 1).toString();
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred. Please try again.');
    } finally {
      target.disabled = false;
      target.textContent = action === 'approve' ? 'Approve' : 'Reject';
    }
  });
</script> 