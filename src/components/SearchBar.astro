---
interface Props {
  categories: string[];
}

const { categories } = Astro.props;
---

<div class="mb-8 space-y-4">
  <div class="relative">
    <input
      type="text"
      id="search"
      placeholder="Search businesses..."
      class="w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-shadow pl-12"
    />
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      class="h-6 w-6 text-gray-400 absolute left-4 top-3.5" 
      fill="none" 
      viewBox="0 0 24 24" 
      stroke="currentColor"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
  </div>

  <div class="flex flex-wrap gap-2">
    <button
      class="category-filter px-4 py-2 rounded-full bg-white border border-gray-200 text-gray-600 hover:border-blue-500 hover:text-blue-600 transition-colors"
      data-category="all"
      data-active="true"
    >
      All
    </button>
    {categories.map(category => (
      <button
        class="category-filter px-4 py-2 rounded-full bg-white border border-gray-200 text-gray-600 hover:border-blue-500 hover:text-blue-600 transition-colors"
        data-category={category.toLowerCase()}
      >
        {category}
      </button>
    ))}
  </div>
</div>

<script>
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const categoryButtons = document.querySelectorAll('.category-filter');
  const businessCards = document.querySelectorAll('.business-card');
  let activeCategory = 'all';

  function filterBusinesses() {
    const searchTerm = searchInput?.value.toLowerCase() || '';

    businessCards.forEach((card: Element) => {
      const businessCard = card as HTMLElement;
      const name = businessCard.dataset.name?.toLowerCase() || '';
      const description = businessCard.dataset.description?.toLowerCase() || '';
      const category = businessCard.dataset.category?.toLowerCase() || '';

      const matchesSearch = name.includes(searchTerm) || 
                          description.includes(searchTerm);
      const matchesCategory = activeCategory === 'all' || 
                            category === activeCategory;

      businessCard.style.display = matchesSearch && matchesCategory ? 'block' : 'none';
    });
  }

  // Search input handler with debounce
  let searchTimeout: NodeJS.Timeout;
  searchInput?.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(filterBusinesses, 300);
  });

  // Category filter handlers
  categoryButtons.forEach(button => {
    button.addEventListener('click', () => {
      categoryButtons.forEach(btn => {
        btn.classList.remove('bg-blue-50', 'border-blue-500', 'text-blue-600');
        btn.setAttribute('data-active', 'false');
      });
      
      button.classList.add('bg-blue-50', 'border-blue-500', 'text-blue-600');
      button.setAttribute('data-active', 'true');
      
      activeCategory = button.getAttribute('data-category') || 'all';
      filterBusinesses();
    });
  });

  // Set initial active state
  document.querySelector('[data-category="all"]')?.classList.add('bg-blue-50', 'border-blue-500', 'text-blue-600');
</script> 